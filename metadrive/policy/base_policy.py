import copy
import logging
import uuid
from metadrive.constants import CamMask
import gymnasium as gym
import numpy as np
from panda3d.core import NodePath, Material, LVector4
from metadrive.base_class.configurable import Configurable
from metadrive.base_class.randomizable import Randomizable
from metadrive.engine.asset_loader import AssetLoader
from metadrive.engine.engine_utils import get_engine


class BasePolicy(Randomizable, Configurable):
    DEBUG_MARK_COLOR = (255, 255, 255, 255)
    DEBUG_MARK_MODEL = None
    SYNC_DEBUG_MARK_POS_TASK_NAME = "policy_mark"

    def __init__(self, control_object, random_seed=None, config=None):
        Randomizable.__init__(self, random_seed)
        Configurable.__init__(self, config)
        # self.engine = get_engine()
        self.control_object = control_object
        self.action_info = dict()


    def act(self, *args, **kwargs):
        """
        Return an action vector consisting of two element: [steering, throttle/brake]. Runtime information generated by
        the policy can be written to self.action_info, which will be retrieved and shown in info dict automatically.
        """
        pass

    def get_action_info(self):
        """
        Get current action info for env.step() retrieve
        """
        return copy.deepcopy(self.action_info)

    def reset(self):
        self.action_info.clear()

    def destroy(self):
        """
        Destroy Base class
        """
        Configurable.destroy(self)
        Randomizable.destroy(self)
        self.control_object = None
        logging.debug("{} is released".format(self.__class__.__name__))

    @property
    def name(self):
        return self.__class__.__name__

    def __repr__(self):
        return self.name

    @property
    def engine(self):
        return get_engine()

    @classmethod
    def get_input_space(cls):
        """
        It defines the input space of this class of policy. This will be the action space for the agent.
        """
        return gym.spaces.Box(-1.0, 1.0, shape=(2, ), dtype=np.float32)

    def get_state(self):
        return self.get_action_info()

    @property
    def episode_step(self):
        return self.engine.episode_step